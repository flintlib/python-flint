name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm, windows-2022, macos-15-intel, macos-14]

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - uses: msys2/setup-msys2@v2.29.0
        with:
          msystem: mingw64
        if: ${{ startsWith( matrix.os , 'windows' ) }}

        # Install pkgconfig on Windows from choco rather than from msys and
        # avoid using the Strawberry one.
      - run: choco install -y --stoponfirstfailure --checksum 6004DF17818F5A6DBF19CB335CC92702 pkgconfiglite
        if: ${{ startsWith( matrix.os , 'windows' ) }}

        # We have to set this here rather than in the cibuildwheel config
        # This is probably something to do with \ vs / in paths...
      - run: echo "PKG_CONFIG_PATH=${{ github.workspace }}/.local/lib/pkgconfig" >> $env:GITHUB_ENV
        if: ${{ startsWith( matrix.os , 'windows' ) }}

      - name: Build wheels
        uses: pypa/cibuildwheel@7c619efba910c04005a835b110b057fc28fd6e93 # v3.2.0
        env:
          # override setting in pyproject.toml to use msys2 instead of msys64 bash
          CIBW_BEFORE_ALL_WINDOWS: msys2 -c bin/cibw_before_all_windows.sh

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - run: bin/install_latest_flint_ubuntu.sh
      - run: pip install build
      - run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  test_wheels:
    needs: build_wheels
    name: Test ${{ matrix.python-version }} wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [
          ubuntu-22.04,
          ubuntu-24.04,
          ubuntu-24.04-arm,
          windows-2022,
          windows-2025,
          macos-15-intel,
          macos-14,
          macos-15,
          ]
        # This list to be kept in sync with python-requires in pyproject.toml.
        python-version: ['3.11', '3.12', '3.13', '3.13t', '3.14', '3.14t', 'pypy3.11']

    steps:
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - uses: actions/download-artifact@v5
        with:
          path: wheelhouse
          merge-multiple: true
      - run: pip install --no-index --find-links wheelhouse python_flint

      # Check if the GIL is disabled in the free-threading build after import.
      - run: |
          python --version --version
          which python
          python -c "import sysconfig; print(sysconfig.get_config_var('Py_GIL_DISABLED'))"
          python -c "import sys; print(getattr(sys, '_is_gil_enabled', lambda: True)())"
          python -c "import sys; import flint; print(getattr(sys, '_is_gil_enabled', lambda: True)())"

      - run: python -m flint.test --verbose

  # On new enough Ubuntu we can build against the system deb.
  test_pip_flint_deb:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: sudo apt-get update
      - run: sudo apt-get install libflint-dev
      - run: pip install .
      - run: python -m flint.test --verbose

  test_docs:
    name: Test docs (build and doctest)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: bin/install_latest_flint_ubuntu.sh
      - run: pip install --upgrade pip
      - run: pip install -r requirements-dev.txt
      - run: spin run -- pytest --doctest-glob='*.rst' doc/source
      - run: spin docs

  # Test build with minimum Cython and meson-python versions.
  test_old_build_requires:
    name: 'Test old Cython/meson-python'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: sudo apt-get update
      - run: sudo apt-get install libflint-dev
      # The versions of cython and meson-python here should be kept in sync
      # with those in pyproject.toml so that we test the stated minimum
      # versions.
      #
      # We don't need to specify ninja as a requirement in pyproject.toml
      # because without --no-build-isolation meson-python handles it
      # automatically in get_requirements_for_build_wheel().
      - run: 'pip install "cython==3.0.11" "meson-python==0.18" "ninja<1.11"'
      - run: pip install --no-build-isolation .
      - run: python -m flint.test --verbose

  # For older Ubuntu we have to build Flint >= 3.0.0
  test_flint_releases:
    name: Test flint ${{ matrix.flint-tag }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # Supported Flint versions:
        flint-tag: ['v3.0.1', 'v3.1.3-p1', 'v3.2.2', 'v3.3.1']
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: bin/install_flint_ubuntu.sh ${{ matrix.flint-tag }}
      - run: pip install .
      - run: python -m flint.test --verbose

  # Test against flint main
  test_flint_main:
    name: Test flint main Linux x86-64
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: bin/install_flint_ubuntu.sh main
      # Need to disable flint version check to build against main
      - run: pip install --config-settings=setup-args="-Dflint_version_check=false" .
      - run: python -m flint.test --verbose

  # Test against flint main
  test_flint_main_arm:
    name: Test flint main Linux ARM
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: bin/install_flint_ubuntu.sh main
      # Need to disable flint version check to build against main
      - run: pip install --config-settings=setup-args="-Dflint_version_check=false" .
      - run: python -m flint.test --verbose

  # Test that we can make a coverage build and report coverage
  test_coverage_build_setuptools:
    name: Test coverage setuptools build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: sudo apt-get update
      - run: sudo apt-get install libflint-dev
      - run: pip install -r requirements-dev.txt
      - run: bin/coverage_setuptools.sh

  # Test that we can make a coverage build and report coverage
  test_coverage_build_meson:
    name: Test coverage meson build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.12' # does not work with 3.13
      - run: sudo apt-get update
      - run: sudo apt-get install libflint-dev
      - run: pip install -r requirements-dev.txt
      - run: bin/coverage.sh

  # Run SymPy test suite against python-flint master
  test_sympy:
    name: Test SymPy ${{ matrix.sympy-version }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        sympy-version: ['1.13.1', '1.14.0']
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: sudo apt-get update
      - run: sudo apt-get install libflint-dev
      - run: pip install .
      - run: pip install pytest pytest-xdist hypothesis
      - run: pip install sympy==${{ matrix.sympy-version }}
      - run: python -c 'import sympy; sympy.test(parallel=True)'

  # Run SymPy master branch agains python-flint main
  test_sympy_master:
    name: Test SymPy master
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: sudo apt-get update
      - run: sudo apt-get install libflint-dev
      - run: pip install .
      - run: pip install pytest pytest-xdist hypothesis
      - run: pip install git+https://github.com/sympy/sympy.git@master
      - run: python -c 'import sympy; sympy.test(parallel=True)'

  # Push nightly wheels to Anaconda scientific-python nightly channel
  # https://scientific-python.org/specs/spec-0004/
  # https://anaconda.org/scientific-python-nightly-wheels/python-flint
  # https://github.com/scientific-python/upload-nightly-action/issues/111

  nightly-wheels-upload:
    name: Upload Anaconda Scientific Python nightly wheels
    needs: [build_wheels]
    # Run on push/merge to main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
        # Downloads all artifacts
      - name: Download release artifacts
        uses: actions/download-artifact@v5
        with:
          path: wheelhouse
          merge-multiple: true

      - name: Copy the wheels into dist
        run: mkdir dist && cp wheelhouse/*.whl dist

      - name: Upload wheels
        uses: scientific-python/upload-nightly-action@b36e8c0c10dbcfd2e05bf95f17ef8c14fd708dbf # 0.6.2
        with:
          artifacts_path: dist
          # This token is generated from anaconda.org
          # https://github.com/scientific-python/upload-nightly-action/issues/111
          anaconda_nightly_upload_token: ${{ secrets.ANACONDA_ORG_UPLOAD_TOKEN }}

  # Deploy wheels and sdist to PyPI

  pypi_release:
    name: Publish to PyPI
    needs: [build_wheels, build_sdist]
    # Run only when a tag is pushed to the flintlib/python-flint repo
    if: "github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && github.repository_owner == 'flintlib'"
    environment:
      name: pypi
      url: https://pypi.org/p/python-flint
    permissions:
      id-token: write
    runs-on: ubuntu-latest

    steps:
        # Downloads all artifacts
      - name: Download release artifacts
        uses: actions/download-artifact@v5
        with:
          path: wheelhouse
          merge-multiple: true

      - name: Copy the PyPI files into dist
        run: mkdir dist && cp wheelhouse/*.whl wheelhouse/*.tar.gz dist

      - name: Publish package on PyPI
        # It is recommended to pin a commit hash here for security but it
        # should be kept up to date. Possibly all actions and dependencies used
        # by the build script should be pinned...
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e  # v1.13.0

  # Make a GitHub release

  github-publish:
    name: Publish GitHub release
    needs: pypi_release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5

      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: sdist
          path: dist

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: >
          gh release create ${{ github.ref_name }} dist/*
          --title "python-flint ${{ github.ref_name }}"
          --notes "https://github.com/flintlib/python-flint?tab=readme-ov-file#changelog"
